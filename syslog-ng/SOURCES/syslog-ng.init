#!/bin/bash

# syslog-ng      init file for starting up the syslog-ng daemon
#
# chkconfig:   - 20 80
# description: Starts and stops the syslog-ng daemon

###############################################################################

source /etc/init.d/kaosv

###############################################################################

kv[prog_name]="syslog-ng"

kv.readSysconfig

binary="${BINARY:-/usr/sbin/syslog-ng}"
conf_file="${CONF_FILE:-/etc/syslog-ng/syslog-ng.conf}"
options="$OPTIONS"
persist_dir="${PERSIST_DIR:-/var/lib/syslog-ng}"
persist_file="$persist_dir/syslog-ng.persist"

kv[user]="${USER:-root}"
kv[search_pattern]="$binary"

kv[log]="${LOG_FILE:-/var/log/syslog-ng.log}"
kv[pid_dir]="${PID_DIR:-/var/run/syslog-ng}"

###############################################################################

kv.addCommand "start"        "Start ${kv[prog_name]}"
kv.addCommand "stop"         "Stop ${kv[prog_name]}"
kv.addCommand "restart"      "Restart (stop+start) ${kv[prog_name]}" "restart"
kv.addCommand "status"       "Show current status of ${kv[prog_name]}"
kv.addCommand "check"        "Validate config" "check"
kv.addCommand "reload"       "Reload ${kv[prog_name]}" "reload"

kv.addCommandAlias "check"   "configtest"

kv.addHandler "start"   "startServiceHandler"
kv.addHandler "start"   "preStartServiceHandler"  "pre"
kv.addHandler "start"   "postStartServiceHandler" "post"
kv.addHandler "stop"    "stopServiceHandler"

kv.disableOutputRedirect "start" "pre"

###############################################################################

prepare() {
  local has_errors=""

  [[ ! -f $binary ]] && has_errors=true && kv.error "Error! File <$binary> does not exist"
  [[ ! -x $binary ]] && has_errors=true && kv.error "Error! File <$binary> is not executable"

  [[ ! -f $conf_file ]] && has_errors=true && kv.error "Error! File <$conf_file> does not exist"
  [[ ! -r $conf_file ]] && has_errors=true && kv.error "Error! File <$conf_file> does not readable"

  [[ ! -d $persist_dir ]] && has_errors=true && kv.error "Error! Directory <$persist_dir> does not exist"
  [[ ! -w $persist_dir ]] && has_errors=true && kv.error "Error! Directory <$persist_dir> is not writable"

  [[ ! -d ${kv[pid_dir]} ]] && has_errors=true && kv.error "Error! Directory <${kv[pid_dir]}> does not exist"
  [[ ! -w ${kv[pid_dir]} ]] && has_errors=true && kv.error "Error! Directory <${kv[pid_dir]}> is not writable"

  [[ -z ${kv[user]} ]] && has_errors=true && kv.error "User value can't be empty"

  if ! kv.hasUser "${kv[user]}" ; then
    has_errors=true && kv.error "User <${kv[user]}> not found in /etc/passwd file"
  fi

  [[ $has_errors ]] && kv.exit $ACTION_ERROR
}

preStartServiceHandler() {
  if ! testServiceConfig true ; then
    kv.show "-------------------------------------------------------------------------------" $GREY
    testServiceConfig
    kv.show "-------------------------------------------------------------------------------" $GREY
    return $ACTION_ERROR
  fi
}

postStartServiceHandler() {
  if kv.statusIs "$STATUS_STOPPED" ; then
    kv.checkSELinux
    return $?
  fi
}

startServiceHandler() {
  kv.daemonize "$binary" "-r -f $conf_file -p ${kv[pid_file]} --user ${kv[user]} --persist-file $persist_file $options"

  [[ $? -ne $ACTION_OK ]] && return $ACTION_ERROR

  kv.getStartStatus

  return $?
}

stopServiceHandler() {
  local pid=`kv.getPid`

  kv.sendSignal "$SIGNAL_TERM"
  kv.removePid

  if kv.getStopStatus ; then
    return $ACTION_OK
  else
    if [[ -n "$1" ]] ; then
      kv.killProcess $pid
    fi
    return $ACTION_ERROR
  fi
}

testServiceConfig() {
  local quiet="$1"

  if [[ $quiet ]] ; then
    $binary -s -f $conf_file &> /dev/null
  else
    $binary -s -f $conf_file
  fi

  local status=$?

  [[ -f ${kv[pid_file]} && ! -s ${kv[pid_file]} ]] && kv.removePid

  [[ $status -eq $ACTION_OK ]] && return $ACTION_OK || return $ACTION_ERROR
}

reloadServiceConfig() {
  kv.sendSignal "$SIGNAL_HUP"
  return $ACTION_OK
}

restart() {
  if check ; then
    kv.restart
  fi

  return $?
}

check() {
  kv.showProcessMessage "Checking ${kv[prog_name]} config"

  testServiceConfig true

  local status=$?

  kv.showStatusMessage "$status"

  if [[ $status -ne 0 ]] ; then
    kv.show "-------------------------------------------------------------------------------" $GREY
    testServiceConfig
    kv.show "-------------------------------------------------------------------------------" $GREY
    return $ACTION_ERROR
  fi

  return $ACTION_OK
}

reload() {
  if ! kv.statusIs "$STATUS_WORKS" ; then
    kv.show "You must start service before this command usage." $BROWN
    return $ACTION_ERROR
  fi

  check

  [[ $? -ne $ACTION_OK ]] && return $ACTION_ERROR

  kv.showProcessMessage "Reloading config for ${kv[prog_name]}"

  reloadServiceConfig

  local status=$?

  kv.showStatusMessage "$status"

  [[ $status -eq $ACTION_OK ]] && kv.log "Service config reloaded by ${kv[real_user]}."

  return $status
}

###############################################################################

prepare

kv.go $@
