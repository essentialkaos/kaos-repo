#!/bin/bash

# kafka-rest        Startup script for kafka-rest

# chkconfig: - 85 15
# processname: kafka-rest
# config: /etc/kafka-rest/kafka-rest.conf
# config: /etc/sysconfig/kafka-rest
# pidfile: /var/run/kafka-rest.pid
# description: Confluent REST Proxy for Kafka

### BEGIN INIT INFO
# Provides: kafka-rest
# Required-Start: $local_fs $remote_fs $network
# Required-Stop: $local_fs $remote_fs $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop kafka-rest
### END INIT INFO

###############################################################################

source /etc/init.d/kaosv

###############################################################################

kafka_rest_user="kafka-rest"
binary=${BINARY:-/usr/bin/kafka-rest-start}
conf_file=${CONF_FILE:-/etc/kafka-rest/kafka-rest.conf}

###############################################################################

kv[user]="$kafka_rest_user"
kv[prog_name]="kafka-rest"
kv[auto_actions_log]=true

###############################################################################

kv.readSysconfig "kafka-rest"

export LOG_DIR
export KAFKAREST_OPTS
export KAFKAREST_HEAP_OPTS
export KAFKAREST_JVM_PERFORMANCE_OPTS
export KAFKAREST_JMX_OPTS

###############################################################################

kv.addCommand "start"        "Start ${kv[prog_name]}"
kv.addCommand "stop"         "Stop ${kv[prog_name]}"
kv.addCommand "restart"      "Restart (stop+start) ${kv[prog_name]}"
kv.addCommand "status"       "Show current status of ${kv[prog_name]}"

kv.addCommandVars "stop" "force"

kv.addHandler "start"   "startServiceHandler"
kv.addHandler "stop"    "stopServiceHandler"
kv.addHandler "restart" "restartServiceHandler"

###############################################################################

startServiceHandler() {

  kv.daemonize "$binary" "$conf_file"

  [[ $? -ne $ACTION_OK ]] && return $ACTION_ERROR

  if kv.getStartStatus ; then
    return $ACTION_OK
  fi

  return $ACTION_ERROR
}


stopServiceHandler() {
    local pid=$(kv.getPid)

    kv.sendSignal SIGTERM

    if kv.getStopStatus ; then
        return $ACTION_OK
    else
        if [[ -n "$1" ]] ; then
            kv.killProcess $pid
        fi

        return $ACTION_ERROR
    fi
}

###############################################################################

kv.go "$@"
