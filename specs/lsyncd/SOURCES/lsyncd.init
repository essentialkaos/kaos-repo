#!/bin/bash

# redis        init file for starting up the lsyncd daemon
#
# chkconfig:   - 85 15
# description: Lightweight inotify based sync daemon
#
# processname:  lsyncd
# config:       /etc/lsyncd.conf
# config:       /etc/sysconfig/lsyncd
# pidfile:      /var/run/lsyncd.pid

###############################################################################

source /etc/init.d/kaosv

###############################################################################

kv[prog_name]="lsyncd"

kv.readSysconfig

binary=${BINARY:-/usr/local/bin/lsyncd}
conf_file=${CONF_FILE:-/etc/lsyncd.conf}

kv[nice]=19
kv[delay_start]=3
kv[delay_stop]=3

kv[search_pattern]="$binary -pidfile"

###############################################################################

kv.addCommand "reload" "Reload configuration file" "reload"

kv.addCommandVars "stop" "force"

kv.addHandler "start" "preStartServiceHandler" "pre"
kv.addHandler "start" "startServiceHandler"
kv.addHandler "stop"  "stopServiceHandler"

kv.addCommandAlias "restart" "condrestart"

kv.disableOutputRedirect "start" "pre"

###############################################################################

reload() {
  kv.showProcessMessage "Reloading config"

  kv.sendSignal "$SIGNAL_HUP"

  kv.showStatusMessage "$ACTION_OK"

  return $ACTION_OK
}

###############################################################################

preStartServiceHandler() {
  local has_errors=""

  [[ ! -f $binary ]] && has_errors=true && kv.error "Error! File $binary is not exist"
  [[ ! -x $binary ]] && has_errors=true && kv.error "Error! File $binary is not executable"

  [[ ! -f $conf_file ]] && has_errors=true && kv.error "Error! File $conf_file is not exist"
  [[ ! -r $conf_file ]] && has_errors=true && kv.error "Error! File $conf_file is not readable"

  [[ -n "$has_errors" ]] && kv.exit $ACTION_ERROR

  return $ACTION_OK
}

startServiceHandler() {

  $binary -pidfile "${kv[pid_file]}" "$conf_file"

  [[ $? -ne $ACTION_OK ]] && return $ACTION_ERROR

  kv.getStartStatus

  return $?
}

stopServiceHandler() {
  local pid=`kv.getPid`

  kv.sendSignal "$SIGNAL_TERM"

  if kv.getStopStatus ; then
    return $ACTION_OK
  else
    if [[ -n "$1" ]] ; then
      kv.killProcess "$pid"
    fi

    return $ACTION_ERROR
  fi
}

###############################################################################

kv.go "$@"