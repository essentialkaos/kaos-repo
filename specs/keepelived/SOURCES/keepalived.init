#!/bin/bash

# keepalived   High Availability monitor built upon LVS and VRRP
#
# chkconfig:   - 86 14
# description: Robust keepalive facility to the Linux Virtual Server project \
#              with multilayer TCP/IP stack checks.

### BEGIN INIT INFO
# Provides: keepalived
# Required-Start: $local_fs $network $named $syslog
# Required-Stop: $local_fs $network $named $syslog
# Should-Start: smtpdaemon httpd
# Should-Stop: smtpdaemon httpd
# Default-Start:
# Default-Stop: 0 1 2 3 4 5 6
# Short-Description: High Availability monitor built upon LVS and VRRP
# Description:       Robust keepalive facility to the Linux Virtual Server
#                    project with multilayer TCP/IP stack checks.
### END INIT INFO

###############################################################################

source /etc/init.d/kaosv

###############################################################################

kv[prog_name]="keepalived"

kv.readSysconfig

binary=${BINARY:-/usr/sbin/keepalived}
options=${KEEPALIVED_OPTIONS:--D}
config=${CONFIG:-/etc/keepalived/keepalived.conf}

kv[pid_dir]="/var/run/keepalived"

daemon_pid="${kv[pid_dir]}/keepalived.pid"
vrrp_pid="${kv[pid_dir]}/vrrp.pid"
checkers_pid="${kv[pid_dir]}/checkers.pid"

kv[pid_file]="$daemon_pid"

###############################################################################

kv.addHandler "start"   "startServiceHandler"
kv.addHandler "stop"    "stopServiceHandler"

kv.addCommand "reload"  "Reload and apply config"  "reload"
kv.addCommand "check"   "Check config"             "check"

kv.addHandler "start" "preStartHandler" "pre"

kv.disableOutputRedirect "start" "pre"

###############################################################################

reload() {
  if ! kv.statusIs "$STATUS_WORKS" ; then
    kv.show "You must start service before this command usage" $BROWN
    return $ACTION_ERROR
  fi

  kv.showProcessMessage "Reloading config for ${kv[prog_name]}"

  reloadConfigHandler

  local status=$?

  kv.showStatusMessage "$status"

  return $status
}

check() {
  kv.showProcessMessage "Checking ${kv[prog_name]} config"

  testServiceConfig true

  local status=$?

  kv.showStatusMessage "$status"

  if [[ $status -ne 0 ]] ; then
    kv.show "Errors while configuration file validation:" $BOLD
    kv.show "-------------------------------------------------------------------------------" $GREY
    testServiceConfig
    kv.show "-------------------------------------------------------------------------------" $GREY
    return $ACTION_ERROR
  fi

  return $ACTION_OK
}

###############################################################################

preStartHandler() {
  checkEnv

  if ! testServiceConfig true ; then
    kv.show "Errors while configuration file validation:" $BOLD
    kv.show "-------------------------------------------------------------------------------" $GREY
    testServiceConfig
    kv.show "-------------------------------------------------------------------------------" $GREY
    return $ACTION_ERROR
  fi

  return $ACTION_OK
}

startServiceHandler() {
  $binary $options -f $config -p $daemon_pid -r $vrrp_pid -c $checkers_pid

  [[ $? -ne 0 ]] && return $ACTION_ERROR

  kv.getStartStatus

  return $?
}

stopServiceHandler() {
  kv.sendSignal "$SIGNAL_TERM"

  kv.getStopStatus

  return $?
}

reloadConfigHandler() {
  kv.sendSignal $SIGNAL_HUP
  return $ACTION_OK
}

###############################################################################

checkEnv() {
  local has_errors

  [[ ! -f "$binary" ]] && has_errors=true && kv.error "Error! File $binary doesn't exist"
  [[ ! -x "$binary" ]] && has_errors=true && kv.error "Error! File $binary is not executable"

  [[ ! -f "$config" ]] && has_errors=true && kv.error "Error! File $config doesn't exist"
  [[ ! -r "$config" ]] && has_errors=true && kv.error "Error! File $config is not readable"

  [[ -n "$has_errors" ]] && kv.exit $ACTION_ERROR

  return $ACTION_OK
}

testServiceConfig() {
  local quiet="$1"

  if [[ -n "$quiet" ]] ; then
    $binary -t -f $config &> /dev/null
  else
    $binary -t -f $config
  fi

  if [[ $? -eq 0 ]] ; then
    return $ACTION_OK
  fi

  return $ACTION_ERROR
}

###############################################################################

kv.go $@
