#!/bin/bash

###############################################################################

# prometheus-nodeexporter        Prometheus exporter for machine metrics

# chkconfig: - 85 15
# processname: prometheus-nodeexporter
# config: /etc/sysconfig/prometheus-nodeexporter
# pidfile: /var/run/prometheus-nodeexporter.pid
# description: Prometheus exporter for machine metrics with pluggable collectors.

### BEGIN INIT INFO
# Provides: prometheus-nodeexporter
# Required-Start: $local_fs $remote_fs $network
# Required-Stop: $local_fs $remote_fs $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop prometheus-nodeexporter

###############################################################################

source /etc/init.d/kaosv

###############################################################################

kv.require "2.15"

kv[prog_name]="prometheus-nodeexporter"

kv.readSysconfig

binary="${BINARY:-/usr/bin/prometheus-nodeexporter}"
user="${USER:-nodeexporter}"
options="${NODE_EXPORTER_OPTS}"

kv[user]="$user"
kv[pid_dir]="/var/run/prometheus-nodeexporter"
kv[log]="/var/log/prometheus-nodeexporter/prometheus-nodeexporter.log"

###############################################################################

kv.addCommand "reload" "Reload configuration files" "reload"

kv.addHandler "start" "startServiceHandler"
kv.addHandler "stop"  "stopServiceHandler"
kv.addHandler "start" "postStartServiceHandler" "post"

###############################################################################

reload() {
  if ! kv.statusIs "$STATUS_WORKS" ; then
    kv.warn "You must start service before this command usage"
    return $ACTION_ERROR
  fi

  kv.showProcessMessage "Reloading config for ${kv[prog_name]}"

  reloadConfigHandler

  local status=$?

  kv.showStatusMessage "$status"

  return $status
}

###############################################################################

startServiceHandler() {
  kv.daemonize "$binary" "$options"

  [[ $? -ne 0 ]] && return $ACTION_ERROR

  kv.getStartStatus

  return $?
}

stopServiceHandler() {
  local pid=$(kv.getPid)

  kv.sendSignal "$SIGNAL_TERM"

  if kv.getStopStatus ; then
    return $ACTION_OK
  else
    kv.killProcess "$pid"
    [[ $? -eq 0 ]] && return $ACTION_FORCED
  fi
}

postStartServiceHandler() {
  if kv.statusIs "$STATUS_STOPPED" ; then
    kv.checkSELinux
    return $?
  fi
}

reloadConfigHandler() {
  kv.sendSignal $SIGNAL_HUP
  return $ACTION_OK
}

###############################################################################

kv.go "$@"
