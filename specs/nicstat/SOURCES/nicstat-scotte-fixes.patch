diff -urN nicstat-src-1.95-orig/nicstat.c nicstat-src-1.95/nicstat.c
--- nicstat-src-1.95-orig/nicstat.c	2017-03-22 01:08:48.000000000 +0300
+++ nicstat-src-1.95/nicstat.c	2020-01-17 15:27:16.644884004 +0300
@@ -87,6 +87,7 @@
 #define	PROC_NET_NETSTAT_PATH	"/proc/net/netstat"
 #define	PROC_NET_BUFSIZ		(128 * 1024)
 #define	PROC_UPTIME		"/proc/uptime"
+#define UINT32_MAX		(4294967295U)
 /* Needs to be fixed if not built under ILP32 */
 typedef unsigned long long	uint64_t;
 typedef unsigned int		uint32_t;
@@ -281,7 +282,6 @@
 static int g_tcp;			/* show TCP stats */
 static int g_opt_x;
 static int g_opt_p;
-static int g_opt_k;
 static int g_verbose;
 static int g_forever;			/* run forever */
 static char **g_tracked;		/* tracked interfaces */
@@ -300,6 +300,7 @@
 static int g_sock;			/* Socket for interface ioctl's */
 
 #ifdef OS_SOLARIS
+static int g_opt_k;
 static kstat_ctl_t *g_kc;		/* kstat chain pointer */
 static int g_new_kstat_chain = B_TRUE;	/* kstat chain updated */
 #ifdef USE_DLADM
@@ -1566,7 +1567,7 @@
 			n = fscanf(snmp, "Udp: %lld %lld %lld %lld "
 			    "%lld %lld\n",
 			    &ll[0], &ll[1], &ll[2], &ll[3],
-			    &ll[4], &ll[5], &ll[6]);
+			    &ll[4], &ll[5]);
 			if (n == 6) {
 				g_udp_new->inDatagrams = ll[0];
 				g_udp_new->outDatagrams = ll[3];
@@ -1588,6 +1589,9 @@
 	struct ethtool_cmd edata;
 	int status;
 
+	if (find_interface_speed(nicp))
+		return;
+
 	if (nicp->flags & NIC_NO_GSET) {
 		if (nicp->speed > 0)
 			/* Already got something */
@@ -1609,7 +1613,7 @@
 		get_speed_duplex(nicp);
 		return;
 	}
-	nicp->speed = edata.speed * 1000000;
+	nicp->speed = (long long) edata.speed * 1000000;
 	nicp->duplex = edata.duplex;
 }
 #endif /* OS_LINUX */
@@ -1811,8 +1815,17 @@
 	(void) strftime(g_timestr, sizeof (g_timestr), "%H:%M:%S", tm);
 }
 
-#define	TCPSTAT(field)	(g_tcp_new->field - g_tcp_old->field)
-#define	UDPSTAT(field)	(g_udp_new->field - g_udp_old->field)
+static uint32_t
+tcpudpstat(uint32_t new, uint32_t old)
+{
+	if (new < old)
+		return((UINT32_MAX - old) + new);
+	else
+		return(new - old);
+}
+
+#define	TCPSTAT(field)	tcpudpstat(((g_tcp_new)->field), ((g_tcp_old)->field))
+#define	UDPSTAT(field)	tcpudpstat(((g_udp_new)->field), ((g_udp_old)->field))
 
 static void
 print_tcp()
@@ -2121,7 +2134,7 @@
 			 */
 			rutil = min(rbps * 800 / nicp->speed, 100);
 			wutil = min(wbps * 800 / nicp->speed, 100);
-			if (nicp->duplex == 2) {
+			if (nicp->duplex == DUPLEX_FULL) {
 				/* Full duplex */
 				util = max(rutil, wutil);
 			} else {
@@ -2341,7 +2354,6 @@
 	struct if_speed_list	*list_elem;
 	char			*speed_list_save_ptr;
 	char			*if_record;
-	char			*if_record_save_ptr;
 	char			name[32];
 	uint64_t		speed;
 	char			duplex_s[32];
@@ -2424,17 +2436,10 @@
 duplex_to_string(duplex_t duplex)
 {
 	switch (duplex) {
-#ifdef OS_LINUX
 	case DUPLEX_HALF:
 		return ("half");
 	case DUPLEX_FULL:
 		return ("full");
-#else
-	case 1:
-		return ("half");
-	case 2:
-		return ("full");
-#endif
 	default:
 		return ("unkn");
 	}
