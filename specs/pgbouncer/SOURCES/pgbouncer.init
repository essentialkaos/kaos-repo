#!/bin/bash
#
# pgbouncer Start PgBouncer connection pooler daemon
#
# chkconfig: - 64 36
# description: PgBouncer is a connection pooler for PostgreSQL.
#              This service starts the PgBouncer daemon.

## BEGIN INIT INFO
# Provides: pgbouncer
# Required-Start: $local_fs $remote_fs $network $syslog $named
# Required-Stop: $local_fs $remote_fs $network $syslog $named
# Should-Start: postgresql
# Short-Description: Start PgBouncer connection pooler daemon
# Description: PgBouncer is a connection pooler for PostgreSQL.
#              This service starts the PgBouncer daemon.
### END INIT INFO

###############################################################################

source /etc/init.d/kaosv

###############################################################################

DEFAULT_PID_FILE="/var/run/pgbouncer/pgbouncer.pid"
PG_RUN_DIR="/var/run/postgresql"

###############################################################################

kv[prog_name]="pgbouncer"

kv.readSysconfig

binary=${BINARY:-/usr/bin/pgbouncer}
user=${USER:-pgbouncer}
conf_file=${CONF_FILE:-/etc/pgbouncer/pgbouncer.ini}
log_dir=${LOG_DIR:-/var/log/pgbouncer}
max_wait=${MAX_WAIT:-120}

is_restart=""

###############################################################################

kv.addCommand "reload" "Reload ${kv[prog_name]} config and update changeable settings" "reload"
kv.addCommand "pause"  "Pause processing new queries"                                  "pause"
kv.addCommand "resume" "Resume work from previous pause command"                       "resume"

kv.addHandler "start"    "startHandler"
kv.addHandler "stop"     "stopHandler"
kv.addHandler "restart"  "restartHandler"

kv.addHandler "start" "preStartHandler"  "pre"
kv.addHandler "start" "postStartHandler" "post"
kv.addHandler "stop"  "preStopHandler"   "pre"

kv.disableOutputRedirect "start" "pre"

###############################################################################

reload() {
  kv.showProcessMessage "Reloading config"
  kv.sendSignal "$SIGNAL_HUP"
  kv.showStatusMessage $ACTION_OK

  return $ACTION_OK
}

pause() {
  kv.showProcessMessage "Pausing"
  kv.sendSignal "$SIGNAL_USR1"
  kv.showStatusMessage $ACTION_OK

  return $ACTION_OK
}

resume() {
  kv.showProcessMessage "Resuming"
  kv.sendSignal "$SIGNAL_USR2"
  kv.showStatusMessage $ACTION_OK

  return $ACTION_OK
}

###############################################################################

preStartHandler() {
  local has_errors

  local port=$(readConfigProperty "$conf_file" "listen_port")

  if [[ -z "${kv[pid_file]}" || -z "$port" ]] ; then
    kv.error "Can't read properties from configuration file"
    has_errors=true
  fi

  if [[ -z "$is_restart" ]] && kv.isBoundPort "$port" ; then
    kv.error "Port $port already bound"
    has_errors=true
  fi

  if [[ ! -r $binary ]] ; then
    kv.error "Binary file $binary must be readable"
    has_errors=true
  fi

  if [[ ! -x $binary ]] ; then
    kv.error "Binary file $binary must be executable"
    has_errors=true
  fi

  if [[ ! -f $conf_file ]] ; then
    kv.error "Configuration file $conf_file doesn't exist"
    has_errors=true
  fi

  if ! kv.hasUser "$user" ; then
    kv.error "User $user doesn't exist on system"
    has_errors=true
  fi

  if [[ ! -d $log_dir ]] ; then
    mkdir -p $log_dir &> /dev/null

    if [[ $? -ne 0 ]] ; then
      kv.error "Can't create logs directory $log_dir"
      has_errors=true
    fi

    chown $user:$user $log_dir -R &> /dev/null
  fi

  if [[ -z "${kv[pid_file]}" ]] ; then
    kv.error "Can't read \"pid\" property from configuration file"
    has_errors=true
  fi

  if [[ -n "$has_errors" ]] ; then
    kv.exit 1
  fi

  return $ACTION_OK
}

postStartHandler() {
  if [[ ! -e "$PG_RUN_DIR" ]] ; then
    return $ACTION_OK
  fi

  local socket_dir=$(readConfigProperty "$conf_file" "unix_socket_dir")

  if [[ -n "$socket_dir" && "$socket_dir" != "/tmp" ]] ; then
    return $ACTION_OK
  fi

  local port=$(readConfigProperty "$conf_file" "listen_port")

  if [[ -z "$port" ]] ; then
    return $ACTION_OK
  fi

  if [[ ! -e "/tmp/.s.PGSQL.${port}" || -e "$PG_RUN_DIR/.s.PGSQL.${port}" ]] ; then
    return $ACTION_OK
  fi

  # Create ink to pgbouncer socket in PG dir
  ln -sf "/tmp/.s.PGSQL.${port}" "$PG_RUN_DIR/.s.PGSQL.${port}" &>/dev/null

  return $ACTION_OK
}

preStopHandler() {
  local port=$(readConfigProperty "$conf_file" "listen_port")

  if [[ -z "$port" ]] ; then
    return $ACTION_OK
  fi

  # Remove link to pgbouncer socket from PG dir
  if [[ -e "$PG_RUN_DIR/.s.PGSQL.${port}" ]] ; then
    rm -f "$PG_RUN_DIR/.s.PGSQL.${port}" &>/dev/null
  fi
}

startHandler() {
  if [[ -z "$is_restart" ]] ; then
    kv.run "$binary" "-d -q $conf_file"
    kv.getStartStatus
    return $?
  fi

  local pid i

  # Get PID of old instance of pgbouncer
  pid=$(kv.getPID)

  # Run new instance of pgbouncer with "restart" mode
  kv.run "$binary" "-R -d -q $conf_file"

  # Check status of new instance
  if ! kv.getStartStatus ; then
    return $ACTION_ERROR
  fi

  # Wait till old instance is finished transferring connections to new one
  for i in $(seq 1 "${max_wait}") ; do
    # Old instance terminated
    if ! kv.isProcExist "$pid" ; then
      return $ACTION_OK
    fi

    sleep 1
  done

  return $ACTION_ERROR
}

stopHandler() {
  # It's restart, do nothing
  if [[ -n "$is_restart" ]] ; then
    return $ACTION_OK
  fi

  kv.sendSignal "$SIGNAL_TERM"
  kv.getStopStatus

  return $?
}

restartHandler() {
  is_restart=true
  return $ACTION_OK
}

###############################################################################

configure() {
  kv[user]="$user"
  kv[search_pattern]="$binary"
  kv[pid_file]=$(readConfigProperty "$conf_file" "pidfile" "$DEFAULT_PID_FILE")
  kv[oom_adj]="$OOM_DISABLE"
}

readConfigProperty() {
  local config="$1"
  local prop_name="$2"
  local def_value="$3"

  local prop=$(kv.readProperty "$config" "$prop_name")

  if [[ "${prop:0:1}" == ";" ]] ; then
    echo "${def_value}"
    return
  fi

  echo "${prop}"
}

###############################################################################

configure

kv.go $@
